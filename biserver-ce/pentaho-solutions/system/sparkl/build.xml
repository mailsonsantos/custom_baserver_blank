<project name="Sparkl - Create and explore pentaho plugins." basedir="." default="dist"
         xmlns:ivy="antlib:org.apache.ivy.ant">

  <description>
    This build file is used to create the Sparkl project
    and works with the common_build.xml file.
  </description>

  <!-- Import the common_build.xml file which contains all the default tasks -->
  <import file="build-res/subfloor-pkg.xml" id="subfloor-pkg"/>

  <property name="plugin.name"
            value="sparkl"
            description="Name of the plugin"/>

  <property name="stage.dir"
            value="${bin.dir}/stage"
            description="Name of the resource directory"/>


  <tstamp/>


  <!-- Build the project.revision property -->
  <property name="distribution.version" value="${project.version}"/>

  <echo>distribution.version = ${distribution.version}</echo>

  <property name="plugin.artifact.id" value="${plugin.name}"/>
  <property name="plugin.zipfile" value="${plugin.artifact.id}-${distribution.version}.zip"/>
  <property name="plugin.disabled.zipfile" value="${plugin.artifact.id}-disabled-${project.version}.zip"/>  

  <!--=======================================================================
			  dist

			  Creates a distribution of this project's plugin zip
			  ====================================================================-->

    <target name="init" depends="subfloor.init">
            <mkdir dir="src"/>
    </target>

  <target name="dist" depends="clean,resolve" description="Creates a distribution">

    <!-- delete and re-create the plugin dist folder tree -->
    <mkdir dir="${stage.dir}"/>
    <mkdir dir="${stage.dir}/${plugin.name}"/>
    <mkdir dir="${stage.dir}/${plugin.name}"/>
    <mkdir dir="${dist.dir}"/>


    <!-- copy the entire plugin to that folder  -->
    <copy todir="${stage.dir}/${plugin.name}/" overwrite="true">
      <fileset dir=".">
		  <include name="**/*"/>
		  <exclude name="bin/"/>
      <exclude name=".git/"/>
      <exclude name="**/.DS_Store"/>
      <exclude name="**/Thumbs.db"/>
      </fileset>
    </copy>


    <!-- create the version file -->
	<tstamp/>
	<property name="sequential.build.id" value="manual-${DSTAMP}"/>

    <!-- create version.xml file -->
    <echoxml file="${stage.dir}/${plugin.name}/version.xml">
      <version branch='${project.stage}' buildId='${sequential.build.id}'>${distribution.version}</version>
    </echoxml>

    <!-- <echo file="${stage.dir}/${plugin.name}/version.xml">&lt;version branch=&apos;${project.stage}&apos; buildId=&apos;${sequential.build.id}&apos;&gt;${distribution.version}&lt;/version&gt;</echo> -->

    <!-- create a zip file -->
    <zip zipfile="${dist.dir}/${plugin.zipfile}"
         basedir="${stage.dir}"
         includes="${plugin.name}/**/*"
         excludes="**/Thumbs.db **/.DS_Store"/>



    <copy todir="${stage.dir}/${plugin.name}-disabled/${plugin.name}" overwrite="true">
        <fileset dir="${stage.dir}/${plugin.name}"/>
    </copy>



    <copy file="${stage.dir}/${plugin.name}-disabled/${plugin.name}/plugin.xml.disabled" 
          tofile="${stage.dir}/${plugin.name}-disabled/${plugin.name}/plugin.xml" overwrite="true"/>


    <!-- create a zip file -->
    <zip zipfile="${dist.dir}/${plugin.disabled.zipfile}"
             basedir="${stage.dir}/${plugin.name}-disabled"
             includes="${plugin.artifact.id}/**/*"
             excludes="**/Thumbs.db"/>


    <!-- create marketplace.xml file -->
    <!-- echoxml creates an xml header that might break the automatic build process -->

    <!-- <echoxml file="${dist.dir}/marketplace.xml"> -->
    <!--   <version> -->
    <!--     <branch>${project.stage}</branch> -->
    <!--     <version>${distribution.version}</version> -->
    <!--     <name>${project.stage.name}</name> -->
    <!--     <package_url> -->
    <!--       ${package.url} -->
    <!--     </package_url> -->
    <!--     <description></description> -->
    <!--     <build_id>${sequential.build.id}</build_id> -->
    <!--     <min_parent_version>${marketplace.metadata.min_parent_version}</min_parent_version> -->
    <!--     <development_stage> -->
    <!--       <lane>${marketplace.metadata.development_stage.lane}</lane> -->
    <!--       <phase>${marketplace.metadata.development_stage.phase}</phase> -->
    <!--     </development_stage> -->
    <!--   </version> -->
    <!-- </echoxml> -->

    <echo file="${dist.dir}/marketplace.xml">      &lt;version&gt;
        &lt;branch&gt;${project.stage}&lt;/branch&gt;
        &lt;version&gt;${distribution.version}&lt;/version&gt;
        &lt;name&gt;${marketplace.metadata.name}&lt;/name&gt;
        &lt;package_url&gt;
          ${marketplace.metadata.package_url}
        &lt;/package_url&gt;
        &lt;description&gt;
          ${marketplace.metadata.description}
        &lt;/description&gt;
        &lt;build_id&gt;${sequential.build.id}&lt;/build_id&gt;
        &lt;min_parent_version&gt;${marketplace.metadata.min_parent_version}&lt;/min_parent_version&gt;
        &lt;development_stage&gt;
          &lt;lane&gt;${marketplace.metadata.development_stage.lane}&lt;/lane&gt;
          &lt;phase&gt;${marketplace.metadata.development_stage.phase}&lt;/phase&gt;
        &lt;/development_stage&gt;
      &lt;/version&gt;</echo>

    <move tofile="${dist.dir}/${ivy.artifact.id}-${project.revision}.zip" file="${dist.dir}/${plugin.zipfile}"/>


  </target>


  <!--=======================================================================
              install-plugin

              Installs the plugin locally
              ====================================================================-->
  <target name="install-plugin" depends="clean, resolve, dist" description="Installs the plugin locally">

    <fail message="plugin.local.install.solutions.dir not set - cannot copy"
          unless="plugin.local.install.solutions.dir"/>

    <delete dir="${plugin.local.install.solutions.dir}/system/${plugin.name}"/>
    <copy todir="${plugin.local.install.solutions.dir}/system/${plugin.name}">
      <fileset dir="${stage.dir}/${plugin.name}">
        <include name="**/*"/>
      </fileset>
    </copy>

    <get src="http://127.0.0.1:8080/pentaho/Publish?publish=now&amp;class=org.pentaho.platform.plugin.services.pluginmgr.PluginAdapter&amp;userid=${plugin.local.install.user}&amp;password=${plugin.local.install.pass}"
         dest="${stage.dir}/blah.html"/>

  </target>

  <!-- Overriding resolve target so we can add resolve-dev -->
  <target name="resolve"
          depends="resolve-default, resolve-test, resolve-codegen, resolve-runtime, ivy.check-releasable"
          description="Retrieves all the dependent libraries" />

  <target name="resolve-runtime" depends="resolve-init">
    <ivy:resolve file="${ivyfile}" conf="runtime" />
    <ivy:retrieve conf="runtime" pattern="${runtimelib.dir}/[module]-[revision](-[classifier]).[ext]" />
  </target>

  <target name="clean-jars">
    <delete dir="${lib.dir}" />
    <delete dir="${testlib.dir}" />
    <delete dir="${runtimelib.dir}" />
  </target>


  <target name="publish-nojar" depends="subfloor-pkg.publish-nojar">
    <ivy:makepom ivyfile="package-ivy-disabled.xml" pomfile="disabled-pom.xml" />   
    <antcall target="maven-publish-artifact">
        <param name="publish.pomFile" value="disabled-pom.xml" />
        <param name="publish.file" value="${dist.dir}/${plugin.disabled.zipfile}" />
    </antcall>   
  </target>



</project>
